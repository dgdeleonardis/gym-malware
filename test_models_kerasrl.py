# imports
from datetime import date

from test_agent_kerasrl import evaluate, model_policy
from train_agent_kerasrl import train_dqn_model
from gym_malware import sha256_train, sha256_holdout, MAXTURNS

import numpy as np
import csv
import os

# WATCH OUT: sha256_train and sha256_holdout are respectively the training set and the testing set (look at gym_malware/__init__.py)

TEST_ID = np.random.randint(1000, high=9999)
MODELS_PATH = "models/"
ROUNDS = 10000


def open_logfile(logfile_path="log_test_kerasrl_agent.cvs"):
	exist = os.path.exists(logfile_path)
	logfile = open(logfile_path, "a")
	writer = csv.writer(logfile)

	if not exist:
		header = [ "model_name",  "env_name", "training rounds", "testing_episodes", "success_rate"]
		writer.writerow(header)
	
	return writer

def train_and_test_env(env_name, rounds, model_name):
	csv_writer = open_logfile()
	# training the model
	_, model, _, _ = train_dqn_model(
		[1024, 256],
		rounds=rounds,
		run_test=False,
		env_name=env_name
	)
	model.save(os.path.join(MODELS_PATH, model_name))

	# testing model on malware-table-v0
	success, _ = evaluate(model_policy(model), model_name)
	data = [model_name,
		env_name,
		rounds,
		len(sha256_holdout),
		len(success) / len(sha256_holdout)
	]
	csv_writer.writerow(data)

if __name__ == "__main__":

	cycle = 10

	for i in range(cycle):
		train_and_test_env("malware-table-v0", ROUNDS, "{}-{}-{}-dqn_table.h5".format(TEST_ID, i, date.today()))
		train_and_test_env("malware-score-v0", ROUNDS, "{}-{}-{}-dqn_score.h5".format(TEST_ID, i, date.today()))
		train_and_test_env("malware-v0", ROUNDS, "{}-{}-{}-dqn_bb.h5".format(TEST_ID, i, date.today()))


