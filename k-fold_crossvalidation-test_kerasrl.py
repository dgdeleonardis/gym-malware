# imports
import pickle
from datetime import datetime, date
import sys
import csv
import os
import numpy as np
import random

from gym.envs.registration import register

from test_agent_kerasrl import evaluate, model_policy
from train_agent_kerasrl import train_dqn_model
from gym_malware import MAXTURNS
from gym_malware import sha256  as dataset, sha256_holdout # dataset

K = 5
rounds = int((len(dataset)/K)*(K-1)*10)
testDate = date.today()

env_name = sys.argv[1]
if env_name == 'malware_env':
    setup_dict = { "id": "malware{}-v0",
        "id_test": "malware{}-test-v0",
        "entry_point": "gym_malware.envs:MalwareEnv",
        "model_filename": "dqn_{}.h5"
    }
elif env_name == 'malware_score_env':
    setup_dict = { "id": "malware{}-score-v0",
        "id_test": "malware{}-score-test-v0",
        "entry_point": "gym_malware.envs:MalwareScoreEnv",
        "model_filename": "dqn_score_{}.h5"
    }
elif env_name == 'malware_table_env':
    setup_dict = { "id": "malware{}-table-v0",
        "id_test": "malware{}-table-test-v0",
        "entry_point": "gym_malware.envs:MalwareTableEnv",
        "model_filename": "dqn_table__{}.h5"
    }
elif env_name == 'malware_table_scaled_env':
    setup_dict = { "id": "malware{}-table-scaled-v0",
        "id_test": "malware{}-table-scaled-test-v0",
        "entry_point": "gym_malware.envs:MalwareTableScaledEnv",
        "model_filename": "dqn_table_scaled_{}.h5"
    }
elif env_name == 'malware_table_softmax_env':
    setup_dict = { "id": "malware{}-table-softmax-v0",
        "id_test": "malware{}-table-softmax-test-v0",
        "entry_point": "gym_malware.envs:MalwareTableSoftmaxEnv",
        "model_filename": "dqn_table_softmax_{}.h5"
    }
else:
    print("Env not defined!")
    exit()

# k-fold crossvalidation di un determinato env, con k=5

def open_logfile(logfile_path="k-fold_crossvalidation-kerasrl-{}-{}.cvs".format(setup_dict["id"].format(""), testDate)):
	exist = os.path.exists(logfile_path)
	logfile = open(logfile_path, "a")
	writer = csv.writer(logfile)
	if not exist:
		header = [ "model_filename",  "env_name", "training_rounds", "test_episodes", "success", "misclassified"]
		writer.writerow(header)
	return logfile, writer


if __name__ == "__main__":
    
    # 1. prendere il dataset e dividerlo in 5 sottoinsiemi disgiunt
    # 1.1 creo un array di interi con lunghezza pari al dataset
    aux_list = dataset.copy()
    # 1.2 vado a creare 5 array di pari dimensioni
    folds = [[] for _ in range(0, K)]
    i = 0
    while len(aux_list) != 0:
        entry = random.choice(aux_list)
        folds[i].append(entry)
        aux_list.remove(entry)
        i = (i + 1) % K

    
    # 2. ciclo: creare un  array di dimensione k dove estrarre ciclicamente l'indice del fold da utilizzare come test
    arr = [*range(0, K)]
    while len(arr) != 0:
        test_index = random.choice(arr)
        training_indexes = [x for x in range(0, K) if x != test_index]
        arr.remove(test_index)
        test_set = folds[test_index]
        training_set = []
        for i in training_indexes:
            training_set.extend(folds[i])
        
        
        # TODO: modificare rounds portandoli ad un numero pari a len(sha256_train*MAXTURNS)
        print("---------- START TRAINING ----------\n")
        print("ROUNDS:", rounds)
        agent, model, history_train, history_test = train_dqn_model([1024, 256], rounds=rounds, run_test=False, env_name=setup_dict["id"].format(test_index))
        print("---------- END TRAINING ----------")
        
        date = datetime.now().strftime("%d%m%Y-%H:%M:%S")
        model_filename = setup_dict["model_filename"].format(date)
        model.save('models/{}'.format(model_filename), overwrite=True)
        
        with open('histories/history_malware_env-test_ {}.pickle'.format(date), 'wb') as f:
            pickle.dump(history_test, f, pickle.HIGHEST_PROTOCOL)

        register(
            id=setup_dict["id_test"].format(test_index),
            entry_point=setup_dict["entry_point"],
            kwargs={'random_sample': False, 'maxturns': MAXTURNS, 'sha256_holdout': test_set}
        )
    
        print("---------- START TEST ----------")
        success, misclassified = evaluate(model_policy(model), model_filename, test_set)
        print("---------- END TEST ----------")
        total = len(sha256_holdout) - len(misclassified) # don't count misclassified towards success
        print("Success rate (black-box): {}\n".format( len(success) / total ))
        print("Misclassified (black-box): {}".format(len(misclassified)))
        logfile, csv_writer = open_logfile()
        data = [model_filename,
		    setup_dict["id"].format(''),
		    rounds,
		    len(test_set),
		    len(success),
            len(misclassified)
	    ]
        csv_writer.writerow(data)
        logfile.close()
